version: 2.1
workflows:
  build_and_deploy:
    jobs:
      - build-api
      - upload-api-coverage:
          requires:
            - build-api
      - deploy-api:
          requires:
            - build-api
      - hold:
          type: approval
          requires:
            - build-api
      - deploy-android:
          requires:
            - hold
jobs:
  build-api:
    working_directory: ~/alephamine/backend
    docker:
      - image: circleci/ruby:3.0.0
        environment:
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: postgres
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: password
      - image: redis
      - image: circleci/postgres:13
        environment:
          POSTGRES_DB: alephamine
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
    steps:
      - checkout:
          path: ~/alephamine
      - run: echo 'deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main' | sudo tee /etc/apt/sources.list.d/pgdg.list > /dev/null
      - run: wget --no-check-certificate -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O- | sudo -u root apt-key add -
      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-13 postgresql-client-13
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run: sudo gem update --system
      - run: sudo gem install bundler:2.2.5
      - run:
          name: Bundle Install
          command: bundle install
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 2m
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bin/rails db:create --trace && bin/rails db:migrate --trace
      - run:
          name: Run tests
          command: |
            mkdir -p test-results/rspec test-artifacts
            ./cc-test-reporter before-build
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec --profile 10 \
                              --color \
                              --order random \
                              --format RspecJunitFormatter \
                              --out test-results/rspec/rspec.xml \
                              --format progress \
                              -- ${TESTFILES}
      - run:
          name: Code Climate Test Coverage
          command: |
            ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.backend.json"
      - persist_to_workspace:
          root: coverage
          paths:
            - codeclimate.*.json
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-artifacts
  upload-api-coverage:
    working_directory: ~/alephamine/backend
    docker:
      - image: circleci/ruby:3.0.0
    environment:
      - CC_TEST_REPORTER_ID: dffaaae3e6ae22e8be43af1e9392fef2effd3f10cd92d64a5f2680e7a68cdcae
    steps:
      - attach_workspace:
          at: ~/alephamine/backend
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          command: |
            ./cc-test-reporter sum-coverage --output - codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -
  deploy-api:
    docker:
      - image: circleci/ruby:3.0.0
    steps:
      - add_ssh_keys:
          fingerprints:
            - "9b:a2:72:66:03:ae:64:19:ca:6b:54:6f:54:ca:c6:2e"
      - run: |
          ssh -oStrictHostKeyChecking=no alephamine@viodine.tech \<<'ENDSSH'
          bash deploy.sh
          ENDSSH
  deploy-android:
    working_directory: ~/alephamine/mobile
    docker:
      - image: circleci/node:10.4.1
    steps:
      - checkout:
          path: ~/alephamine
      - run:
          name: Set version
          command: |
            sed -i 's/12345/$CIRCLE_BUILD_NUM/g' app/app.json
            sed -i 's/local/$CIRCLE_BUILD_NUM/g' app/config/version.ts
      - run:
          name: Installing dependencies
          command: npm ci

      - run:
          name: Login into Expo
          command: npx expo-cli login -u $EXPO_USERNAME -p $EXPO_PASSWORD

      - run:
          name: Publish to Expo
          command: npx expo-cli publish --non-interactive --max-workers 1 --release-channel $EXPO_RELEASE_CHANNEL